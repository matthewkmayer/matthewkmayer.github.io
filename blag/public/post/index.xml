<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Matthew Mayer&#39;s tech blog</title>
    <link>https://matthewkmayer.github.io/blag/public/post/</link>
    <description>Recent content in Posts on Matthew Mayer&#39;s tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Aug 2021 00:28:53 -0700</lastBuildDate><atom:link href="https://matthewkmayer.github.io/blag/public/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Closed loop development</title>
      <link>https://matthewkmayer.github.io/blag/public/post/closed-loop-development/</link>
      <pubDate>Sat, 14 Aug 2021 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/closed-loop-development/</guid>
      <description>Closed loop development Brace yourself for car analogies.
Vehicles: open/closed loops Modern cars have two modes of operation: open loop and closed loop.
Open loop: get engine inputs such as engine speed, air temperature and how much air is going into the engine. Apply a set of rules to determine how much fuel to put in.
Closed loop: using the above data combined with information from the exhaust, adjust how much fuel goes into the engine.</description>
    </item>
    
    <item>
      <title>Tiny guide to Rails</title>
      <link>https://matthewkmayer.github.io/blag/public/post/tiny-guide-to-rails/</link>
      <pubDate>Tue, 13 Apr 2021 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/tiny-guide-to-rails/</guid>
      <description>The tiny guide to Rails (that I wish I had) I&amp;rsquo;ve found Rails to rely on more convention over configuration than I&amp;rsquo;m comfortable with - so much so it seemed impenetrable at times. This is the tiny guide to Rails I wish I had to understand where code lives and how the application works.
Know where to find things Go to definition or go to implementation doesn&amp;rsquo;t work well with Rails projects and most IDEs I&amp;rsquo;ve tried.</description>
    </item>
    
    <item>
      <title>2020 technical review</title>
      <link>https://matthewkmayer.github.io/blag/public/post/2020-technical-review/</link>
      <pubDate>Sun, 27 Dec 2020 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/2020-technical-review/</guid>
      <description>As the challenging year of 2020 wraps up, here&amp;rsquo;s what happened in the past twelve months with a focus on my experience in technology.
Rust I&amp;rsquo;ve been writing Rust since mid 2015. That&amp;rsquo;s over five years of working with the language. At the start of 2020 I stepped back from my work on Rusoto, an AWS SDK for Rust.
Looking back: every line of Rust I&amp;rsquo;ve written has been unpaid, volunteer work.</description>
    </item>
    
    <item>
      <title>Rusty von Humboldt</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusty-von-humboldt/</link>
      <pubDate>Tue, 23 Jun 2020 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusty-von-humboldt/</guid>
      <description>&lt;p&gt;Rusty von Humboldt is a GitHub Archive data explorer and Extract, Transform and Load (ETL) tool. Or: &lt;strong&gt;seeing how far the tools you know can take you.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Surviving the upcoming winter</title>
      <link>https://matthewkmayer.github.io/blag/public/post/surviving-the-winter/</link>
      <pubDate>Tue, 26 May 2020 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/surviving-the-winter/</guid>
      <description>This is my perspective of the current state of Rusoto as a semi-retired maintainer and Amazon outsider. The post borrows the term winter from AI Winter: a time period of decreased interest and funding.
Amazon is hiring engineers for an AWS Rust SDK Amazon has two public job openings for Senior Software Development Engineers - AWS Rust SDK. There&amp;rsquo;s now enough customer demand for Amazon to make an official SDK for Rust.</description>
    </item>
    
    <item>
      <title>Red/green bugfix</title>
      <link>https://matthewkmayer.github.io/blag/public/post/red-green-bugfix/</link>
      <pubDate>Thu, 06 Feb 2020 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/red-green-bugfix/</guid>
      <description>Red/green bugfixes are the best technique for communicating understanding of a bug and its solution, especially for asynchronous code reviews.
A bug Say a new bug has been discovered in a backend service. If it&amp;rsquo;s found in production, the first instinct is to solve it as quickly as possible. While laudable, this kneejerk reaction can actually make the fix slower and harder for others to understand.
Usual fixing procedure  Reproduce the bug Using logs and/or reading the code, find where the issue is Fix the bug, make a pull request, let coworkers review it  While this procedure is straightforward and can get a bug fix out quickly, there are downsides to this process:</description>
    </item>
    
    <item>
      <title>Farewell to Rusoto</title>
      <link>https://matthewkmayer.github.io/blag/public/post/farewell-rusoto/</link>
      <pubDate>Tue, 07 Jan 2020 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/farewell-rusoto/</guid>
      <description>TL;DR: I&amp;rsquo;m not working on Rusoto any more.
A history of Rusoto Anthony DiMarco and I started Rusoto in July of 2015. I knew we started the project shortly after Rust&amp;rsquo;s 1.0 release, but I didn&amp;rsquo;t realize we had our first commit less than two months after Rust 1.0 landed. Wow!
Some early parts of Rusoto are similar to how Rusoto looks now, others are quite a bit different. Our first iteration of code generation used a Python2 script to parse the botocore service definitions and output Rust.</description>
    </item>
    
    <item>
      <title>Advent of Code 2019, the wrong way (part one)</title>
      <link>https://matthewkmayer.github.io/blag/public/post/aoc-twy-01/</link>
      <pubDate>Mon, 16 Dec 2019 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/aoc-twy-01/</guid>
      <description>Per my tweet: doing Advent of Code 2019 the wrong way. üòÅ
Today we&amp;rsquo;re easing into #serverless.
WHAT are we doing? Advent of Code!
Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like.
It&amp;rsquo;s an excuse to play around with smaller coding problems and enjoy some recreational coding. In this series of blog posts, we&amp;rsquo;re going to go about solving the problems the wrong way: as much serverless as possible.</description>
    </item>
    
    <item>
      <title>Rust as anti lock brakes</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rust-as-abs/</link>
      <pubDate>Mon, 28 Oct 2019 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rust-as-abs/</guid>
      <description>Rust: a Language for the Next 40 Years put a seed of an idea on my head. I recommend watching the 55 minute video if you haven&amp;rsquo;t had a chance yet.
The recent posts on the Microsoft Security Response Center blog helped the pieces click in my head.
Rust is like anti lock brakes (ABS) for motorcycles.
Wait, what? There are a lot of parallels here!
Bringing a motorcycle to a stop as quickly as possible is a skill.</description>
    </item>
    
    <item>
      <title>Taking a break, 2019</title>
      <link>https://matthewkmayer.github.io/blag/public/post/2019-break/</link>
      <pubDate>Tue, 11 Jun 2019 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/2019-break/</guid>
      <description>Like last year I&amp;rsquo;m taking a summer break from open source, including Rusoto.
Outside time is good for me I&amp;rsquo;ll be spending more time outside and less time on a computer until September 2019. There won&amp;rsquo;t be a disappearing act but I&amp;rsquo;ll be significantly reducing the amount of time spent on computers for the next few months.
Until then!</description>
    </item>
    
    <item>
      <title>How much testing is enough?</title>
      <link>https://matthewkmayer.github.io/blag/public/post/how-much-testing/</link>
      <pubDate>Fri, 10 May 2019 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/how-much-testing/</guid>
      <description>Most software developers will tell you that tests are good. More tests are better. How much is enough? How can one recognize diminishing returns? What types of tests should be written? Here are some guidelines for determining what a team&amp;rsquo;s &amp;ldquo;enough&amp;rdquo; level of testing is.
Definitions and goals  unit test: tests a single unit of code. Think a single function or method. If there are more than one or three mocks being used, it&amp;rsquo;s probably not a unit test functional test: tests behavior of code, staying within a single process integration test: a test that crosses a process boundary.</description>
    </item>
    
    <item>
      <title>Don&#39;t hot patch</title>
      <link>https://matthewkmayer.github.io/blag/public/post/dont-hotpatch/</link>
      <pubDate>Tue, 07 May 2019 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/dont-hotpatch/</guid>
      <description>A hot take on hot patching/fixing.
Definitions A hot patch, or hot fix, is a method of fixing a critical bug found in production by following a branching strategy that&amp;rsquo;s outside the norm of software development. Specifically called out in Gitflow, this process is more complex and error prone than treating a critical bug as a regular bug or feature.
When following Gitflow, a hot patch can get a fix to production faster by making the change off the master branch, which is then also applied to the release branch.</description>
    </item>
    
    <item>
      <title>Chaining Rusoto Futures</title>
      <link>https://matthewkmayer.github.io/blag/public/post/chaining-rusoto-futures/</link>
      <pubDate>Wed, 02 Jan 2019 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/chaining-rusoto-futures/</guid>
      <description>&lt;p&gt;Rusoto supports asynchronously running commands to AWS. While immediately making a blocking call to AWS is a common use case, one can create actions to run async and let the &lt;code&gt;tokio&lt;/code&gt; runtime handle it. This opens up the ability to run multiple AWS calls concurrently.&lt;/p&gt;
&lt;p&gt;If a project sets up infrastructure on AWS, the actions that don&amp;rsquo;t depend on others to finish can run concurrently. For example: creating an S3 bucket and an SQS queue. Instead of creating a bucket and waiting for the request to finish, then moving on to creating the queue, one can put the Rusoto &lt;code&gt;Futures&lt;/code&gt; together and concurrently run them.&lt;/p&gt;
&lt;p&gt;In this post we&amp;rsquo;ll explore to examples of using futures and the Rusoto DynamoDB client.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Repos for getting hired</title>
      <link>https://matthewkmayer.github.io/blag/public/post/repos-for-being-hired/</link>
      <pubDate>Tue, 04 Dec 2018 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/repos-for-being-hired/</guid>
      <description>I&amp;rsquo;m often involved in hiring. When GitHub links are on a resume, I look at pinned repos and source repos. Here&amp;rsquo;s a checklist of important items to have in a GitHub public repository to catch the eye of reviewers. Or at least my eye when hiring, and why it&amp;rsquo;s important.
Your goal, my goal Yours: get hired. Mine: make an informed decision about hiring someone who can do the job.</description>
    </item>
    
    <item>
      <title>Postgres over TLS with postgres and r2d2_postgres</title>
      <link>https://matthewkmayer.github.io/blag/public/post/postgres-tls/</link>
      <pubDate>Thu, 13 Sep 2018 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/postgres-tls/</guid>
      <description>&amp;ldquo;Dance like nobody&amp;rsquo;s watching. Encrypt like everybody is.&amp;rdquo;
In this post we&amp;rsquo;ll go over how to get the postgres crate and r2d2_postgres working with openssl for connection pooling with TLS.
Source code is available.
Goal Modern web applications are built with resiliency and fault tolerance in mind. For our example, we&amp;rsquo;ll be examining parts of a web application backed by a Postgres database.
When services launch, their database won&amp;rsquo;t always be available.</description>
    </item>
    
    <item>
      <title>CI/CD Pipeline</title>
      <link>https://matthewkmayer.github.io/blag/public/post/ci-cd-pipeline/</link>
      <pubDate>Wed, 12 Sep 2018 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/ci-cd-pipeline/</guid>
      <description>Previously, we defined Continuous Integration (CI), Continuous Deployment (CD) and build servers. Now we&amp;rsquo;ll see how combining these concepts creates something greater than its parts: a true CI/CD pipeline.
Continuous Integration and Continuous Delivery are processes that tell humans what techniques to use with source control.
Build server is a server, servers or a system that automatically builds and tests code.
Putting these concepts together require people following processes so automated tasks execute well.</description>
    </item>
    
    <item>
      <title>Build servers, Continuous Integration, Continuous Delivery</title>
      <link>https://matthewkmayer.github.io/blag/public/post/build-ci-cd/</link>
      <pubDate>Wed, 05 Sep 2018 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/build-ci-cd/</guid>
      <description>Ever hear someone say &amp;ldquo;CI/CD build pipeline&amp;rdquo; and weren&amp;rsquo;t sure that that means, exactly?
Let&amp;rsquo;s define and explore the concepts of:
 Build server Continuous Integration (CI) Continous Delivery (CD)  Three separate ideas Build server is a server, servers or a system that automatically builds and tests code.
Continuous Integration and Continuous Delivery are both processes, guiding humans on what to do.
Build server (or build service) Whenever code is pushed to the repository, the build server checks out that commit or branch and tries to build the code and run tests.</description>
    </item>
    
    <item>
      <title>Taking a break</title>
      <link>https://matthewkmayer.github.io/blag/public/post/2018-break/</link>
      <pubDate>Mon, 02 Apr 2018 00:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/2018-break/</guid>
      <description>After three years maintaining an open source project, it&amp;rsquo;s time to take a few months of me time.
TL;DR I&amp;rsquo;m taking a break to do things I&amp;rsquo;ve been missing. I will be back, no later than September 1st, 2018.
Rusoto history and running an open source project Back in early 2015, Anthony DiMarco and I started Rusoto. Rust&amp;rsquo;s promises of performance and correctness looked like a perfect match for cloud computing.</description>
    </item>
    
    <item>
      <title>Curated list of resources for software engineering</title>
      <link>https://matthewkmayer.github.io/blag/public/post/resources-list/</link>
      <pubDate>Sun, 18 Mar 2018 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/resources-list/</guid>
      <description>List of links for topics including:
 Git Branching strategies Ruby Go Testing Cloud and AWS  Git  Think like a Git Pro Git  Branching strategies  GitHub flow Trunk based Development  Ruby  Learn Ruby the Hard Way  Go  Effective Go Golang Tripping Hazards  Testing  Practical Test Pyramid https://en.wikipedia.org/wiki/Test-driven_development Red Green Refactor Repeat Cucumber general reference  Cloud and AWS  Getting Started on AWS This Is My Architecture A Cloud Guru Linux Academy  </description>
    </item>
    
    <item>
      <title>Rust 2018</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rust-2018/</link>
      <pubDate>Sun, 07 Jan 2018 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rust-2018/</guid>
      <description>Per the call for blog posts, I&amp;rsquo;ve got thoughts and ideas on where Rust can go in the upcoming year. My wants haven&amp;rsquo;t changed much over the last year or so: give me non-embarassing compilation speed! üòÅ
Before getting started, I&amp;rsquo;m very appreciative of the hard work put into the overall Rust community and ecosystem, including the behind-the-scenes work. It&amp;rsquo;s difficult to understate just how much time and energy people volunteer in pursuit of a better, Rust-ier world.</description>
    </item>
    
    <item>
      <title>Rusoto: 2017 in review</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-2017-in-review/</link>
      <pubDate>Sun, 31 Dec 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-2017-in-review/</guid>
      <description>Rusoto, an unofficial SDK for Amazon Web Services, had a wonderful year! We made great strides in improving functionality, increasing the number of services covered and making various ergonomic changes.
Improved functionality  Added all publicly available AWS regions Custom endpoint support HTTP connection pools for connecting to services S3 supports streaming responses: no more loading the entire file to download into a Vector  More supported services A non-exhaustive list:</description>
    </item>
    
    <item>
      <title>Test driven development with Rust</title>
      <link>https://matthewkmayer.github.io/blag/public/post/tdd-with-rust/</link>
      <pubDate>Thu, 19 Oct 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/tdd-with-rust/</guid>
      <description>Test Driven Development (TDD) encourages better software design. When the desired behavior is known and expressible, it&amp;rsquo;s highly effective to make modular and easily tested code.
Let&amp;rsquo;s take a look at using TDD with Rust, using release-party as an example.
What we&amp;rsquo;re changing Release-party is a command line tool I made for my day job. We&amp;rsquo;ve got a fair amount of repositories on GitHub: one for each microservice. Our deployments are automated through TravisCI: the master branch is deployed to our testing environment and the release branch is deployed to production.</description>
    </item>
    
    <item>
      <title>Software development force multipliers</title>
      <link>https://matthewkmayer.github.io/blag/public/post/software-dev-force-multipliers/</link>
      <pubDate>Wed, 20 Sep 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/software-dev-force-multipliers/</guid>
      <description>While a software enginerd/pixie wrangler at heart, I&amp;rsquo;ve discovered the stereotypical developer path of grabbing a ticket from Jira, working on it, shoving the results to QA and repeat isn&amp;rsquo;t for me. The biggest reason is how this leaves a tremendous amount of efficiency on the table. This inefficient approach is difficult to reconcile with empathy for the customer buying and using the product.
My code writing speed has peaked: I can&amp;rsquo;t write code any faster.</description>
    </item>
    
    <item>
      <title>RustConf 2017 recap</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rustconf-2017-recap/</link>
      <pubDate>Sun, 20 Aug 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rustconf-2017-recap/</guid>
      <description>My recap of RustConf 2017 in Portland, Oregon. Or: how I avoided hotel surge pricing during the eclipse weekend!
RustConf the second I&amp;rsquo;ve been told the first conference for community or technology is the best. I&amp;rsquo;m happy to report I don&amp;rsquo;t believe it applies in this case! The first RustConf set a tone of possibility and potentials whereas RustConf 2017 focused more on the progress made in the language, ecosystem and community.</description>
    </item>
    
    <item>
      <title>Rusoto codegen, part three</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-three/</link>
      <pubDate>Tue, 11 Jul 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-three/</guid>
      <description>This is part three of Rusoto code generation. The first two parts went over how code inside a crate is generated. In this post, we&amp;rsquo;ll take a look at how we make the crate for an AWS service.
Parts one and two recap In the previous two posts, we followed code generation from the Simple Queue Service (SQS) botocore service definition to Rust code. We glossed over where the generated code went in order to concentrate on the generation itself.</description>
    </item>
    
    <item>
      <title>Rusoto codegen, part two</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-two/</link>
      <pubDate>Fri, 16 Jun 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-two/</guid>
      <description>In the previous post we took a quick tour of the major pieces of Rusoto code generation. In this post we&amp;rsquo;ll get deeper into code generation for the Simple Queue Service.
Picking up from part one Part one described a few parts of Rusoto codegen:
 Finding which services to generate Making the service&amp;rsquo;s crate Generating the service and placing it inside its crate rustfmt the generated code to make it look pretty  Step three is where this post will concentrate.</description>
    </item>
    
    <item>
      <title>Rusoto codegen</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen/</link>
      <pubDate>Fri, 09 Jun 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen/</guid>
      <description>Writing a software development kit (SDK) is a challenge. Especially when the target has a tremendous number of services, endpoints and different styles of interacting, such as REST, querystring and &amp;ldquo;other.&amp;rdquo; Rusoto uses the botocore service definitions to create Rust code to interact with Amazon Web Services. Let&amp;rsquo;s dive into how it&amp;rsquo;s done!
Using Simple Queue Service as an example To make this post clearer, we&amp;rsquo;ll follow the Simple Queue Service (SQS) from botocore service definition to the rusoto_sqs crate.</description>
    </item>
    
    <item>
      <title>Rusoto RDS walkthrough, mk 2</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-mk2/</link>
      <pubDate>Tue, 23 May 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-mk2/</guid>
      <description>Since the publication of Rusoto RDS walkthrough, a new version of Rusoto has been released: 0.25.0. This includes some breaking changes so let&amp;rsquo;s work through those. We&amp;rsquo;ll also be cleaning up some of the rougher edges in the previous walkthrough.
rusoto-rds-mk2 The previous project&amp;rsquo;s source code is on github. We&amp;rsquo;ll be making a new project based off that one. You can see the final product in rusoto-rds-mk2 folder.
Cargo.toml changes required for Rusoto 0.</description>
    </item>
    
    <item>
      <title>Rusoto RDS walkthrough</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-walkthrough/</link>
      <pubDate>Sun, 14 May 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-walkthrough/</guid>
      <description>Let&amp;rsquo;s tie some great Rust crates together! In this walkthrough, we&amp;rsquo;ll use Rusoto to create a Postgres RDS database instance, Rocket.rs to make a web server and Diesel to talk to the database on AWS to make a proof of concept hit counter.
Walkthrough overview There are two projects in this walkthrough. First is rusoto-rds. This creates the Amazon Web Services (AWS) Relational Database Service (RDS) instance and should be run first.</description>
    </item>
    
  </channel>
</rss>
