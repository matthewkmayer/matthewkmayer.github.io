<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Matthew Mayer&#39;s tech blog</title>
    <link>https://matthewkmayer.github.io/blag/public/post/</link>
    <description>Recent content in Posts on Matthew Mayer&#39;s tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Sep 2017 21:28:53 -0700</lastBuildDate>
    
	<atom:link href="https://matthewkmayer.github.io/blag/public/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Workflow Ramblings</title>
      <link>https://matthewkmayer.github.io/blag/public/post/workflow-ramble-on/</link>
      <pubDate>Wed, 13 Sep 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/workflow-ramble-on/</guid>
      <description>&lt;p&gt;While a software enginerd/pixie wrangler at heart, I&amp;rsquo;ve discovered I can&amp;rsquo;t follow the stereotypical developer path: grab a ticket from Jira, work on it, shove the results to QA and repeat.  This approach leaves a tremendous amount of efficiency on the table.&lt;/p&gt;

&lt;p&gt;Outside that narrow path, there&amp;rsquo;s many methods to maximize the effects of the work put in.  Think force multiplier, but don&amp;rsquo;t think 10x developer.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustConf 2017 recap</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rustconf-2017-recap/</link>
      <pubDate>Sun, 20 Aug 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rustconf-2017-recap/</guid>
      <description>&lt;p&gt;My recap of RustConf 2017 in Portland, Oregon.  Or: how I avoided hotel surge pricing during the eclipse weekend!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rusoto codegen, part three</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-three/</link>
      <pubDate>Tue, 11 Jul 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-three/</guid>
      <description>&lt;p&gt;This is part three of Rusoto code generation.  The first two parts went over how code inside a crate is generated.
In this post, we&amp;rsquo;ll take a look at how we make the crate for an AWS service.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rusoto codegen, part two</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-two/</link>
      <pubDate>Fri, 16 Jun 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen-part-two/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://matthewkmayer.github.io/blag/public/post/rusoto-codegen/&#34;&gt;previous post&lt;/a&gt; we took a quick tour of the major pieces of &lt;a href=&#34;https://github.com/rusoto/rusoto&#34;&gt;Rusoto&lt;/a&gt; code generation.  In this post we&amp;rsquo;ll get deeper into code generation for the Simple Queue Service.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rusoto codegen</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen/</link>
      <pubDate>Fri, 09 Jun 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-codegen/</guid>
      <description>&lt;p&gt;Writing a software development kit (SDK) is a challenge.  Especially when the target has a tremendous number of services, endpoints and different styles of interacting, such as REST, querystring and &amp;ldquo;other.&amp;rdquo;  &lt;a href=&#34;https://github.com/rusoto/rusoto&#34;&gt;Rusoto&lt;/a&gt; uses the &lt;a href=&#34;https://github.com/boto/botocore&#34;&gt;botocore&lt;/a&gt; service definitions to create Rust code to interact with Amazon Web Services.  Let&amp;rsquo;s dive into how it&amp;rsquo;s done!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rusoto RDS walkthrough, mk 2</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-mk2/</link>
      <pubDate>Tue, 23 May 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-mk2/</guid>
      <description>&lt;p&gt;Since the publication of &lt;a href=&#34;https://matthewkmayer.github.io/blag/public/post/rusoto-rds-walkthrough/&#34;&gt;Rusoto RDS walkthrough&lt;/a&gt;, a new version of Rusoto has been released: &lt;a href=&#34;https://github.com/rusoto/rusoto/releases/tag/rusoto-v0.25.0&#34;&gt;0.25.0&lt;/a&gt;.  This includes some breaking changes so let&amp;rsquo;s work through those.  We&amp;rsquo;ll also be cleaning up some of the rougher edges in the previous walkthrough.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rusoto RDS walkthrough</title>
      <link>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-walkthrough/</link>
      <pubDate>Sun, 14 May 2017 21:28:53 -0700</pubDate>
      
      <guid>https://matthewkmayer.github.io/blag/public/post/rusoto-rds-walkthrough/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s tie some great Rust crates together!  In this walkthrough, we&amp;rsquo;ll use &lt;a href=&#34;https://github.com/rusoto/rusoto&#34;&gt;Rusoto&lt;/a&gt; to create a Postgres RDS database instance,
&lt;a href=&#34;https://github.com/SergioBenitez/Rocket&#34;&gt;Rocket.rs&lt;/a&gt; to make a web server and &lt;a href=&#34;https://github.com/diesel-rs/diesel&#34;&gt;Diesel&lt;/a&gt; to talk to the database on AWS to make a proof of concept hit counter.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>